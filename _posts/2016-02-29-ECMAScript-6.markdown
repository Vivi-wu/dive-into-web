---
title:  "ECMAScript 6 入门读书笔记"
category: JavaScript
---
[在线电子书及相关讨论地址：](http://es6.ruanyifeng.com/#docs/let)

## let 命令

该命令用于声明变量。

+ `let` 命令只在其所在的代码块(由一对大括号限制起来的区域)内有效。
+ 如果有代码块嵌套，外层代码块使用 `let` 声明的变量，不受内层代码块的影响。
+ 不像 `var`，该命令不引起变量提升。提前使用未声明的变量，报错。
+ **不允许**使用 `let` 在同一个代码块内**重复声明**同一个变量，会报错 duplicate declaration。
+ 那如果使用 `var` 和 `let` 重复声明同一个变量呢？

    {
      let a = 10;    // a = 10
      var a = 1;     // a = 10
    }
    {
      var a = 1;     // a = undefined
      let a = 10;    // a = 10
    }

<!--more-->

### 块级作用域

块级作用域外部，无法调用块级作用域内部定义的函数。

ES6规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量(即使有同名的全局变量存在)，就会报错。

## const 命令

该命令用于声明常量。

+ 变量一旦声明和初始化，其值不可再次改变。
+ 如果只声明，没有赋值初始化，以后也没法重新赋值。
+ 只在声明所在的块级作用域内有效.
+ 该命令声明的常量也是不提升。
+ 受 `var` 、 `let` 命令声明的变量限制，不可重复声明同名常量。
+ 对于 `const` 声明的常量，如果是一个对象，储存的是一个地址，不可变的只是这个地址，但对象本身是可变的，依然可以为其添加新属性。
+ 如果真的想将对象冻结，使用 `Object.freeze` 方法。

### 全局对象的属性

全局对象是最顶层的对象，在浏览器环境指的是 window 对象，在 Node.js 指的是 global 对象。

ES6规定，`var` 命令和 `function` 命令声明的全局变量，依旧是全局对象的属性；`let` 命令、`const` 命令、`class` 命令声明的全局变量，**不属于**全局对象的属性。

## 数组的解构赋值

ES6允许按照一定模式，从数组和对象中提取值，按照对应位置，对变量进行赋值，这被称为解构赋值（Destructuring Assignment）。

+ 其实相当于 array matching，等号左右两边都是数组。
+ 如果等号右边不是数组（不可遍历的结构），会报错。
+ 解构不成功，等号左边的变量在右边没有找到匹配的，变量的值就等于 `undefined`。
+ 不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功.

    let [x, y, ...z] = ['a'];
    x // "a"
    y // undefined
    z // []

###  Fail-Soft Destructuring 带默认值的解构

当等号右边对应位置上的数组成员严格等于 (`===`) undefined，左边数组的默认值是才会生效。

    var [x = 1] = [undefined];
    x // 1
    var [x = 1] = [null];
    x // null

## 对象的解构赋值

对象的解构与数组有一个重要的不同。数组的元素是按次序排列的。对象的属性没有次序，变量必须与属性同名，才能取到正确的值。

    var { bar, foo } = { foo: "aaa", bar: "bbb" };
    foo // "aaa"
    bar // "bbb"

对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。<span class="t-blue">真正被赋值的是后者(同名属性的属性值对应的变量)，而不是前者</span>。

    var { foo: baz } = { foo: "aaa", bar: "bbb" };
    baz // "aaa"
    foo // error: foo is not defined

对象的解构也可以指定默认值。

和数组一样，解构也可以用于嵌套结构的对象。

    var obj = {
      p: [
        "Hello",
        { y: "World" }
      ]
    };
    var { p: [x, { y }] } = obj;
    x // "Hello"
    y // "World"





