---
title:  "React H5开发实践"
category: JavaScript
---

## 路由

react-router-dom 的 Hooks 中的 `useHistory` 只能用在函数式组件里.

使用底层 `<Router>` 最常见的情况是将自定义历史记录与状态管理库（如Redux或Mobx）进行同步。但是 React Router 并不是一定要根状态管理库一起使用，它仅用于深度集成 history。

## Context

这个感觉实现了部分状态管理工具的功能。

技术方案到底写什么——技术方案就是写你计划如何实现需求中的功能。拿这个评论项目来说，发布功能如何实现？要调用什么接口，输入输出时什么？要不要考虑 xss 攻击？再如点赞，是先执行动画再调用接口，还是先调用接口再执行动画？还有，你的代码如何拆解，分几个模块，有哪些核心的方法。

## HOOK

动机：React 需要为**共享状态逻辑**提供更好的原生途径。

使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以**单独测试**并**复用**。将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）

问题表现： class 中生命周期函数经常包含不相关的逻辑。如：获取数据，事件侦听、消除。相互关联且需要对照修改的代码被拆分在不同的钩子函数里，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。

忘记正确地处理 componentDidUpdate 是 React 应用中常见的 bug 来源。

在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也是很多人将 React 与**状态管理库结合使用**的原因之一。

Class的问题：`this` 绑定事件处理器，代码冗余。使用 class 组件会无意中鼓励开发者使用一些让优化措施无效的方案，不好压缩。

为了解决这些问题，Hook 使你**在非 class 的情况下**可以使用更多的 React 特性。从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数。

建议：先在新的不复杂的组件中尝试使用 Hook，并确保团队中的每一位成员都能适应。

### State Hook

`useState()` 是 React 内置的 Hook，它会返回一对值：**当前**状态和一个让你**更新**它的函数。

唯一的入参是**初始**state，值的类型不必是 object。

可以在组件里多次使用 state hook 来声明多个 state 变量。

一般来说，在函数退出后变量就会“消失”，而 Hook 中 state 中的变量会被 React 保留。

我们传递一个新的值给 setCount。React 会重新渲染相应组件，并把最新的 count 传给它。

### Effect Hook

在 React 组件中执行数据获取、订阅或者手动修改 React 组件的 DOM，都属于“（副）作用”。

Hook 使用了 JavaScript 的闭包机制。使得可以在 effect 中直接访问组件内部的 state 变量（或其他 props）。

很多情况下，我们希望在组件加载和更新时执行同样的操作，这就导致使用 class 编写的组件，在上述两个钩子函数里要写重复的代码/调用相同的函数。

`useEffect` 是一个 Effect Hook。跟组件的`componentDidMount `、`componentDidUpdate` 具有相同的用途。

默认情况下，React 会在**第一次渲染**之后和**每次更新**之后（DOM已经更新完毕），调用“副作用”函数。

与上述两个钩子函数不同的是：使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕。

每个 effect 通过**返回一个函数**来指定清除函数（React 会组件销毁时如何“清除”副作用）。返回的函数的命名非必须。

React 在执行当前 effect 之前对上一个 effect 进行清除。

可以在组件里多次使用 `useEffect`。但也不是必须的。 state 变量可以存储 object 和 array，讲相关的数据分为一组。

React 将按照 effect 声明的顺序**依次调用**组件中的每一个 effect。

#### 性能优化

每次渲染后都执行清理或者执行 effect 可能会导致性能问题，通过比较 prev 和当前的值是否变化，这个常见的需求被内置在 useEffect Hook API中。执行传入第二个可选参数，以数组形式。

如果数组中有多个元素，即使只有一个元素发生变化，React 也会执行 effect。

```js
useEffect(() => {
  document.title = `You clicked ${count} times`;
}, [count]); // 仅在 count 更改时更新
```
如果你要使用此优化方式，请确保数组中包含了所有外部作用域中会随时间变化并且在 effect 中使用的变量.

### 自定义 Hook

Hook 是一种复用状态逻辑的方式，每次调用都有一个完全独立的 state，因此可以在单个组件中多次调用同一个自定义 Hook。

约定：如果函数的名字以 “use” 开头并调用其他 Hook，我们就说这是一个自定义 Hook。方便 linter 插件在使用 Hook 代码里查找bug

### 使用规则

1. 只能在 React 函数组件，或者自定义的 Hook 中
2. **不要**在循环、条件判断或者子函数中
3. 按照代码的用途分离