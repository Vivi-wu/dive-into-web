---
title:  "HTTP 网络协议"
category: Other
---
HTTP是网络传输协议，如浏览器与服务器之间通信和传输网络资源。

目前 HTTP 1.1 为互联中的主要协议，而 HTTP/2 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，简称h2。

2015年底 Google Chrome、Mozilla Firefox、Microsoft Edge和Opera已支持HTTP/2，并默认启用。

### 编码

HTTP/1.x 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。

HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用**二进制编码**。

<!--more-->

### 多路复用

HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接。浏览器为了控制资源，会对单个域名有 6-8 的个数限制，超过限制的请求会被挂起等待了一段时间。

HTTP/2中：

+ 同域名下所有通信都在**单个连接**上完成（合并在同一 TCP 连接内）
+ 单个连接可以承载任意数量的双向数据流 Stream。
+ 数据流以消息 Message 的形式发送，而消息又由一个或多个帧 Frame 组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。

实践表明，相比HTTP/1.1，新页面加载可以加快11.81% 到 47.7%

### 头部压缩

HTTP 每一次通信都会携带一组头部，用于描述这次通信的的资源、浏览器属性、cookie 等。

HTTP/2 对消息头采用 HPACK算法（专为http2头部设计的压缩格式）进行压缩传输，而 HTTP/1.x 每次请求都会携带大量冗余头信息，浪费带宽资源。

具体实现：

+ 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对；
+ 首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;
+ 每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值。

### 服务端推送（Server Push）

服务端向客户端发送比客户端请求更多的数据。这允许服务器直接提供浏览器渲染页面所需资源，而无须浏览器在收到、解析页面后再提起一轮请求，节约了加载时间。

### 安全

HTTP/2设计本身允许非加密的 http 协议，但多数客户端开发者声明只支持通过 TLS 加密的h2协议，使得**经TLS加密的HTTP/2(即h2)**成为了**事实上的强制标准**。

## web 缓存

对于前端开发者来说，我们主要跟浏览器中的缓存打交道。关于缓存资源的问题，都仅仅**针对GET请求**。而对于POST, DELETE, PUT这类行为性操作通常不做任何缓存。

HTTP通过缓存将服务器资源的副本保留一段时间，这段时间称为**新鲜度限值**。这在一段时间内请求相同资源不会再通过服务器。

HTTP协议中 `Cache-Control` 和 `Expires`可以用来设置新鲜度的限值，前者是 **HTTP1.1** 中新增的响应头，后者是 **HTTP1.0** 中的响应头。二者所做的事时都是相同的，但由于Cache-Control使用的是**相对时间**，而Expires可能存在客户端与服务器端时间不一样的问题，所以 **Cache-Control更为准确**。

Cache-Control 不仅仅可以在**响应头**中设置，还可以在**请求头**中设置。

可能设置的属性值有：

+ max-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。
+ public 指定响应可以在代理缓存中被缓存，于是可以被多用户共享。如果没有明确指定private，则默认为public。
+ private 响应只能在私有缓存中被缓存，不能放在代理缓存上。对一些用户信息敏感的资源，通常需要设置为private。
+ no-cache 表示必须先与服务器确认资源是否被更改过（依靠 If-None-Match 和 Etag），然后再决定是否使用本地缓存。
+ no-store 绝对禁止缓存任何资源，也就是说每次用户请求资源时，都会向服务器发送一个请求，每次都会下载完整的资源。通常用于机密性资源。

### 如何更新缓存

浏览器或代理缓存中缓存的资源过期了，并不意味着它和原始服务器上的资源有实际的差异，仅仅意味着到了要进行核对的时间了。这种情况被称为**服务器再验证**。

如果资源发生变化，则需要取得新的资源，并在缓存中替换旧资源。

如果资源没有发生变化，缓存只需要获取新的响应头，和一个新的过期时间，对缓存中的资源过期时间进行更新即可。 HTTP1.1 推荐使用的验证方式是 `If-None-Match` / `Etag` 对应 Request Headers 和 Response Headers，在 HTTP1.0 中则使用 `If-Modified-Since` / `Last-Modified`.

当用于更新缓存时，cache 使用已缓存message的 `Last-Modified` 字段的值生成 `If-Modified-Since` 字段的值。

以下情况**必须忽略** `If-Modified-Since`：

+ 如果请求中包含一个 `If-None-Match`
+ 如果 If-Modified-Since = HTTP-date 中，值不是一个有效的 HTTP-date
+ 如果请求既不是 GET 也不是 HEAD

### Conditional request

Conditional requests are HTTP requests [RFC7231] that include one or more header fields indicating a precondition to be tested before applying the method semantics to the target resource.

条件的请求是指包含一个或多个头字段，它们指示在应用到目标资源之前有需要测试的先决条件的 HTTP 请求。

### 常见状态码

400 - Bad Request，客户端传入参数的错误，如必选参数没有传入等
404 - Not Found，接口要访问的资源不存在，一般是URL或URL的参数错误
405 - Method Not Allowed，接口访问的Method不正确，比如应该使用GET的接口使用了POST访问等
500 - Internal Server Error，其它类型的错误默认都会返回500

## HTTPS

HTTPS并非是应用层的一种新协议，而是 HTTP 通信接口部分用 SSL/TLS 协议代替而已。

它就是 HTTP 只是对传输数据进行了加密。

HTTP报文使用明文（指未经过加密的报文）方式发送，缺陷是导致信息窃听/数据泄露（通过网络的嗅探设备还原http内容）、数据篡改（没有任何办法确认，发出的请求/响应和接收到的请求/响应是前后相同的）、流量劫持、钓鱼欺诈（请求和响应不会对通信方进行确认，任何人都可以伪造虚假服务器欺骗用户）等安全问题的重要原因。

HTTPS标准端口443，HTTP标准端口80;

要进行HTTPS通信，证书是必不可少的，对网站服务器进行真实身份认证。而使用的证书必须向认证机构（CA）购买。

其次，HTTPS普遍认为性能消耗要大于HTTP，因为与纯文本通信相比，加密通信会消耗更多的CPU及内存资源。如果每次通信都加密，会消耗相当多的资源，平摊到一台计算机上时，能够处理的请求数量必定也会随之减少。但事实并非如此，用户可以通过性能优化、把证书部署在SLB或CDN，来解决此问题。

网站切换到https的域名，谷歌浏览器访问仍然提示“不安全”。打开开发者工具“Security”栏，在Overview里面看到：This page is not secure. Resources - mixed content，This page includes HTTP resources. View ** requests in Network Panel。

点击最后那句话的链接，在“Network”栏直接看到了所有http加载的资源。

### SSL vs TLS

Secure Socket Layer，由 NETSCAPE 发明，其第一版并没有 release。1995年发行了v2，之后发布了v3。1999年 NETSCAPE 把SSL协议的控制权给了 IETF（Internet Engineering Task Force，互联网工程任务组），该组织 renamed SLL to TLS（Transport Layer Security），并在1999年发布了 TLS 1.0。直到2015年，SSL 3.0 被官宣 deprecated。2018年 TLS 1.3 通过，目前浏览器支持率 83.6%，而 TLS 的支持率在 98%。

### 使用https加载的图片protocol却是http/1.1?


### h2 vs https

HTTP/2 is only supported over TLS (HTTPS). 

### Chrome浏览器查看Protocol

在“Network”栏下，Name、Status、Domain...那表格头鼠标右键点击，在打开的菜单栏里勾选“Protocol”即可。
