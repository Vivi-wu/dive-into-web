---
title:  "H5 页面开发：设计稿还原"
category: CSS
---
### iframe

强行设置页面缩放比例，如果页面中含有 iframe，那么 iframe 同样会被缩放。众所周知，URS登陆组件本质就是一个 iframe，我们可以修改其中的样式来达到自己想要的效果。问题在于我们**无法修改** iframe 中根节点 html 的 font-size，因此缩放 iframe，无法自动变换其中各个元素的大小。

### 文字

使用 `px` 作为文字的单位。对不同dpr下的手机设置不同的font-size

### Flex

弹性盒子作为布局神器可以完成很多富有创造力的布局，只要记住常用的属性，用起来特别的方便。

关于兼容性：测试系统 IOS 8、IOS 9、android 4.2、android 4.4、android 6.0 都ok。在华为的部分手机上发现flex不支持行内元素，必须改成块级元素才能被支持。

### box-sizing

box-sizing 作为 CSS3 的属性，给前端人员的尺寸测量带来了极大的便利性。没有用这个属性之前，我们设置宽度的时候，总是要去除 margin、padding 来计算，使用它后，不用再单独计算宽度和间距，全部根据视觉稿测量的为准。

## 图片

几种方案可供挑选：

+ **字体图标** fonticon 方案应该是最好的解决方案了，能非常契合 rem 布局，能完成不同场景下显示效果一致的问题。**劣**：做字体工作量巨大，让视觉去做这么多矢量图，再转成svg与字体文件，视觉不一定愿意去做。

    一个字体图标生成网站 [iconmoon](https://icomoon.io/)。

+ 淘宝**每个图标一张大图**，在任何dpr的机型之中，都对应同一张图片。好处是通过 rem 的方式，在任何尺寸下都能完美的还原视觉稿。**劣**：给对用户流量造成了不必要的开支，即在 dpr1 的 pad 上面，无论如何都是请求最高分辨率的图片。同时，每张图片一个请求不符合减少HTTP请求这一条优化原则。

    据说手淘有自己的技术实现http请求时间优化，所以可忽略请求数多带来的时间成本。

+ 图标采取 base64 方案在通过 background-size 缩放。**劣**：但如果 base64 图片增多的话，尤其是在于retina这种需要双倍图的情况下，会大大增加 css 文件的大小（gzip压缩base64字符也并不明显），如果css过大，还不如增加一个请求来请求图片资源。如果用了自动化工具还好，一旦没有使用自动化工具，代码混乱且难以维护。

    这种方式比较适合图片小而且不经常更换的场景，因此该方案不能作为主体方案。

+ CSS sprite 图，不能100%还原视觉稿，在任何手机下看到的图标大小都是固定的。如果方案接受，可以采用 compass 方式自动生成雪碧图。

## 强大的 rem

**优**：在移动端可以做到适配不同的手机分辨率；保持整体缩放；没有设计上的差异；可以不需要用到 `media query`。

实现方法：

    html { //设置页面的rem大小
      font-size: calc(100vw/3.75);
    }

解释：

1. `vm` 是css一种单位，代表视图 viewport 宽的 `1%`。那么 `100vm` 就表示整个 viewport 宽度。（视图高度的百分之几则用 `vh` 表示）
2. CSS `calc()` 函数，提供加减乘除四则运算，可混合使用各种 CSS 单位（如百分比、px、em、rem等单位）
3. 比如高清视觉稿按照 iPhone6 的宽度来设计，ps中看到宽为 750px，实际设备宽度为 375px。上面的 calc 计算可得根元素字体大小为 100px。那么:

    1rem = 100px;
    0.85rem = 85px; // 视觉稿上量的 85px 对应于实际 css 代码里的 0.85rem

4. 这样在 iPhone6 下，所有元素的尺寸还是和视觉稿的尺寸一样，而 iPhone5 中，因为设备的宽度变小了，`100vw/3.75` 得到的值相应地变小，即rem的单位值会变小，页面中所有的尺寸会等比例缩放。

跨浏览器兼容方案：

    document.documentElement.style.fontSize = document.documentElement.clientWidth/3.75 + 'px'

注意: `clientwidth` 以像素计。该属性包括 padding，但不包括垂直滚动条（如果有的话）、border 和 margin。

document.documentElement.clientWidth 也可用 window.innerWidth （IE9 以下不支持）
