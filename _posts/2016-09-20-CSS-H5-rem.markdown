---
title:  "H5 页面开发：设计稿还原"
category: CSS
---
本文主要是关于 H5 页面开发，还原设计稿web前端技术实现的一些经验和思考。

参考 [一篇真正教会你开发移动端页面的文章-二](http://hcysun.me/2015/10/19/%E4%B8%80%E7%AF%87%E7%9C%9F%E6%AD%A3%E6%95%99%E4%BC%9A%E4%BD%A0%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%87%E7%AB%A0-%E4%BA%8C/)

### iframe

通过设置页面缩放比例 `initial-scale`，需要考虑页面中是否中含有 iframe，因为 iframe 同样会被缩放。

比如使用 URS 登陆组件，因为它本质就是一个 iframe，我们可以修改其中的样式来达到自己想要的效果。问题在于我们**无法修改** iframe 中根节点 html 的 font-size，因此缩放 iframe，无法自动变换其中各个元素的大小。

### Flex

弹性盒子作为布局神器可以完成很多富有创造力的布局，只要记住常用的属性，用起来特别的方便。

关于**兼容性**：测试系统 IOS 8、IOS 9、android 4.2、android 4.4、android 6.0 都ok。在华为的部分手机上发现flex不支持行内元素，必须改成块级元素才能被支持。

### box-sizing

box-sizing 作为 CSS3 的属性，给前端人员的尺寸测量带来了极大的便利性。使用它后，不用再单独计算元素宽度和间距，全部根据视觉稿测量的为准。

## 图片

几种方案可供挑选：

+ **字体图标** fonticon 方案应该是最好的解决方案了，能非常契合 rem 布局，能完成不同场景下显示效果一致的问题。

    **劣**：做字体工作量巨大，让视觉去做这么多矢量图，再转成svg与字体文件，视觉不一定愿意去做。

    一个字体图标生成网站 [iconmoon](https://icomoon.io/)。

+ 淘宝**每个图标一张大图**，在任何 dpr 的机型之中，都对应同一张图片。好处是通过 rem 的方式，在任何尺寸下都能完美的还原视觉稿。

    **劣**：给用户流量造成了不必要的开支，即在 dpr1 的 pad 上面，无论如何都是请求最高分辨率的图片。同时，每张图片一个请求不符合减少HTTP请求这一条优化原则。

    据说手淘有自己的技术实现 http 请求时间优化，所以可忽略请求数多带来的时间成本。

+ 图标采取 base64 方案在通过 background-size 缩放。

    **劣**：如果 base64 图片增多，尤其是在 retina 这种需要双倍图的情况下，会大大增加 css 文件的大小（gzip压缩base64字符也并不明显）。如果css文件过大，还不如增加一个请求来请求图片资源。如果用了自动化工具还好，一旦没有使用自动化工具，代码混乱且难以维护。

    这种方式比较适合图片小而且不经常更换的场景，因此该方案不能作为主体方案。

+ CSS sprite 图，不能 100% 还原视觉稿，在任何手机下看到的图标大小都是固定的。如果视觉接受这种烦啊，可以采用 compass 方式自动生成雪碧图。

## 强大的 rem

**优**：保持整体缩放；在移动端不同手机上屏蔽设计上的差异。

实现方法：

    html { //设置页面的rem大小
      font-size: calc(100vw/7.5);
    }

解释：

1. `vm` 是 CSS 一种单位，代表视图 viewport 宽的 `1%`。那么 `100vm` 就表示整个 viewport 宽度。（视图高度的百分之几则用 `vh` 表示）
2. CSS `calc()` 函数，提供加减乘除四则运算，可混合使用各种 CSS 单位（如百分比、px、em、rem等单位）
3. 比如高清视觉稿按照 iPhone6 的宽度来设计，ps中看到宽为 750px，实际设备宽度为 375px。上面的 calc 计算可得根元素字体大小为 50px。那么:

    1rem = 50px;
    0.28rem = 14px; // 视觉稿上量的 28px，除以 100 转换成 rem 单位 0.28rem 即可
    // 要想知道实际 CSS 尺寸只需：28px 除以 2 得 14px。

4. 这样在 iPhone6 下，所有元素的尺寸还是和视觉稿的尺寸一样，而 iPhone5 中，因为设备的宽度变小了，`100vw/7.5` 得到的值相应地变小，即rem的单位值会变小，页面中所有的尺寸会等比例缩放。
5. 这个 `7.5` 是让根元素 font-size 等于 100px 计算所得的比例（750px / 100px = 7.5）。换成 iPhone5 则为 6.4 （640px / 100px = 6.4）

跨浏览器兼容方案：

    document.documentElement.style.fontSize = document.documentElement.clientWidth / 7.5 + 'px'

注意: `clientwidth` 以像素计。该属性包括 padding，但不包括垂直滚动条（如果有的话）、border 和 margin。

document.documentElement.clientWidth 也可用 window.innerWidth （IE9 以下不支持）

### initial-scale, maximum-scale

我们知道 CSS 编写的样式尺寸是基于布局视口 viewport 计算的。我们说 iPhone6 设备像素尺寸是 750px，其设备像素比 DPR 是 2。理想视口像素个数 device-width 等于 375px = 设备像素个数 / DPR。

这就提供了另一种思路，既然 CSS像素可以放大或缩小，我们讲 CSS 像素缩放至与设备像素宽度相等，那么 750 个设备像素也就能显示 750 个 CSS 像素。就可以直接使用 PSD 中所量得的元素尺寸了。

    var scale = 1 / window.devicePixelRatio;
    document.querySelector('meta[name="viewport"]').setAttribute('content','width=device-width,initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');

然而我们发现，无论是 iPhone5 还是 iPhone6，即使设备像素变了（320px ——> 375px），可是元素的宽度并没有变（始终是 PSD 中量的尺寸），这样页面的元素就不成比例了。

### 听听设计师怎么说

rem 简单粗暴的实现，使得“屏幕越大按钮越大”。设计师认为“屏幕的尺寸和字体的大小不应该是一个完全正比或者说线性的关系”。

可行的方案是通过 `media query`，对某一宽度范围内的手机，设定 html 根元素的 font-size 为一个确定的以 px 为单位的值。页面其他元素的尺寸再通过 rem 来指定。

## 文字

使用 `px` 作为**文本**的单位，使用媒体查询来进行动态设置。

    @media screen and (max-width: 321px) {
        body {
            font-size:16px
        }
    }
    @media screen and (min-width: 321px) and (max-width:400px) {
        body {
            font-size:17px
        }
    }
    @media screen and (min-width: 400px) {
        body {
            font-size:19px
        }
    }

规律是一二区段字体大小差 1px，二三区段字体大小差 2px。按这个规律来设置其他元素的字体大小。
