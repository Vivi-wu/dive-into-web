---
title:  "设计高质量的组件"
category: JavaScript
---
+ 尽量保持一个组件只做一件事
+ 如果两个组件逻辑紧密，无法清晰地定义各自的责任，那么也许这两个组件本身就不应该拆开
+ 高内聚：把逻辑紧密相关的内容放在一个组件内。如 .vue 的单文件组件，把用户界面内容、交互行为和样式放在一个JS文件中，天然具有高内聚的特点
+ 低耦合：需要对系统中的功能有充分认识，根据功能点划分模块
+ prop定义组件对外接口

## 面向设计的半封装web组件

[原文地址](https://cloud.tencent.com/developer/article/1154278)

我们平常提到组件，就会想到重用，各个项目都能使用。而本文要探讨的是面向设计、面向项目的web组件开发。

传统写web组件，重点基本是放在组件功能、通用性、扩展性以及易用性上。由于组件这东西只能开发实现，导致在组件的设计以及使用上，前端开发有了非常大的话语权，下游决定了上游。让开发来决定设计，显然这对产品是不负责任的。

如果有组件自信对UI层进行了完美地抽象与封装，这表明，这个组件已经对UI层的表现有了很大的限制。

工程化就是要讲求一致性，但是，个性化显然就是需要不一致。

为了满足UI需求，讲求封装的设计理念，必然会导致web组件越来越大，越来越臃肿。

考虑到未来发展，可以从这两方面寻求改变：分离和半封装。

1. 分离：

    + 样式控制从JS分离：UI需求不是你可控的，CSS才是最好的UI样式API
    + 参数来源从JS分离：优先使用HTML元素上对应的**属性值**作为组件的内容源

2. 半封装：此“半封装”是针对不同设计风格的项目而言，对于某一个具体的项目，其web组件还是完全封装的，还是有成熟的API接口的，小白开发也是可以直接使用的。

开发层面只关注：

1. 固定的模块引入
2. 通用的事件处理
3. 动态样式控制
4. 核心API接口设计
